import { Composer, Scenes } from "telegraf";
import { message } from "telegraf/filters";
import { sanitizeMarkdown } from "telegram-markdown-sanitizer";
import { db } from "../../drizzle/connection.js";
import { credentials } from "../../drizzle/schema.js";
import * as suai from "../suai/index.js";
import { InvalidCredentialsError } from "../suai/index.js";

const usernameComposer = new Composer();

usernameComposer.on(message("text"), async (ctx) => {
  const username = ctx.message.text;

  ctx.scene.state.username = username;

  await Promise.all([
    ctx.deleteMessage(),
    ctx.telegram.editMessageText(
      ctx.chat.id,
      ctx.scene.state.botMessageId,
      undefined,
      `üë§ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ||${sanitizeMarkdown(username)}||

‚¨áÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ PRO\\.GUAP*`,
      {
        parse_mode: "MarkdownV2",
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
        },
      },
    ),
  ]);

  ctx.wizard.next();
});

const passwordComposer = new Composer();

passwordComposer.on(message("text"), async (ctx) => {
  const password = ctx.message.text;

  ctx.scene.state.password = password;

  await Promise.all([
    ctx.deleteMessage(),
    ctx.telegram.editMessageText(
      ctx.chat.id,
      ctx.scene.state.botMessageId,
      undefined,
      `üë§ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ||${sanitizeMarkdown(ctx.scene.state.username)}||
üîë *–ü–∞—Ä–æ–ª—å:* ||${sanitizeMarkdown(password)}||

‚¨áÔ∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*`,
      {
        parse_mode: "MarkdownV2",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ", callback_data: "confirm" }],
            [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }],
          ],
        },
      },
    ),
  ]);

  ctx.wizard.next();
});

const confirmComposer = new Composer();

confirmComposer.action("confirm", async (ctx) => {
  const { username, password } = ctx.scene.state;

  const [_sessionCookies, error] = await suai
    .login({ username, password })
    .then(
      (data) => [data, null],
      (error) => [null, error],
    );

  if (error && error instanceof InvalidCredentialsError) {
    await Promise.all([
      ctx.editMessageText(
        `üò¢ *–ö, —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã*`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                  callback_data: "add_credentials",
                },
              ],
              [
                {
                  text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu",
                },
              ],
            ],
          },
          parse_mode: "MarkdownV2",
        },
      ),
      ctx.scene.leave(),
    ]);
    return;
  }

  if (error) {
    throw error;
  }

  await db.insert(credentials).values({
    suaiUsername: username,
    suaiPassword: password,
    userId: ctx.from.id,
  });

  await Promise.all([
    ctx.editMessageText(`ü•≥ *–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\\!*`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç–∞–º", callback_data: "chats" }],
          [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
        ],
      },
      parse_mode: "MarkdownV2",
    }),
    ctx.scene.leave(),
  ]);
});

export const addCredentialsScene = new Scenes.WizardScene(
  "ADD_CREDENTIALS_SCENE",
  async (ctx) => {
    const messageInstance = await ctx.editMessageText(
      `‚¨áÔ∏è *–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ PRO\\.GUAP*`,
      {
        parse_mode: "MarkdownV2",
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
        },
      },
    );

    ctx.scene.state.botMessageId = messageInstance.message_id;
    ctx.wizard.next();
  },
  usernameComposer,
  passwordComposer,
  confirmComposer,
);
