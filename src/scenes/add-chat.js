import { Composer, Scenes } from "telegraf";
import { sanitizeMarkdown } from "telegram-markdown-sanitizer";
import { db } from "../../drizzle/connection.js";
import { credentials, subscriptions } from "../../drizzle/schema.js";
import { eq, sql, SQL } from "drizzle-orm";

const chatIdComposer = new Composer();

chatIdComposer.hears(/^-\d+$/, async (ctx) => {
  const targetChatId = ctx.message.text;
  ctx.scene.state.targetChatId = targetChatId;

  const subscriptionEntries = await db
    .selectDistinct()
    .from(subscriptions)
    .where(eq(subscriptions.chatId, targetChatId));

  if (subscriptionEntries.length > 0) {
    await Promise.all([
      ctx.deleteMessage(),
      ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.scene.state.botMessageId,
        undefined,
        `‚ö†Ô∏è *–í –¥–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö*

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ ID –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
          },
          parse_mode: "MarkdownV2",
        },
      ),
    ]);
    return;
  }

  const [chatInfo, botChatMember] = await Promise.all([
    ctx.telegram.getChat(targetChatId).catch(() => null),
    ctx.telegram.getChatMember(targetChatId, ctx.botInfo.id).catch(() => null),
  ]);

  if (
    botChatMember === null ||
    (chatInfo.type === "channel" &&
      (botChatMember.status !== "administrator" ||
        botChatMember.can_post_messages === false))
  ) {
    await Promise.all([
      ctx.deleteMessage(),
      ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.scene.state.botMessageId,
        undefined,
        `‚ö†Ô∏è *–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –∏ –∏–º–µ–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ ID –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
          },
          parse_mode: "MarkdownV2",
        },
      ),
    ]);
    return;
  }

  await Promise.all([
    ctx.deleteMessage(),
    ctx.telegram.editMessageText(
      ctx.chat.id,
      ctx.scene.state.botMessageId,
      undefined,
      `üí¨ *ID —á–∞—Ç–∞:* ${sanitizeMarkdown(targetChatId)}

‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ \\(–ù–∞–ø—Ä–∏–º–µ—Ä: "–±–µ—Å–µ–¥–∞ –≥—Ä—É–ø–ø—ã" \\)\\. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è \\- 32 —Å–∏–º–≤–æ–ª–∞\\.*`,
      {
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
        },
        parse_mode: "MarkdownV2",
      },
    ),
  ]);

  ctx.wizard.next();
});

chatIdComposer.action("use_this_chat", async (ctx) => {
  const targetChatId = ctx.chat.id.toString();
  ctx.scene.state.targetChatId = targetChatId;

  const subscriptionEntries = await db
    .selectDistinct()
    .from(subscriptions)
    .where(eq(subscriptions.chatId, targetChatId));

  if (subscriptionEntries.length > 0) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      ctx.scene.state.botMessageId,
      undefined,
      `‚ö†Ô∏è *–í –¥–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö*

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ ID –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`,
      {
        reply_markup: {
          inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
        },
        parse_mode: "MarkdownV2",
      },
    );

    return;
  }

  await ctx.telegram.editMessageText(
    ctx.chat.id,
    ctx.scene.state.botMessageId,
    undefined,
    `üí¨ *ID —á–∞—Ç–∞:* ${sanitizeMarkdown(targetChatId)}

‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ \\(–ù–∞–ø—Ä–∏–º–µ—Ä: "–±–µ—Å–µ–¥–∞ –≥—Ä—É–ø–ø—ã" \\)\\. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è \\- 32 —Å–∏–º–≤–æ–ª–∞\\.*`,
    {
      reply_markup: {
        inline_keyboard: [[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]],
      },
      parse_mode: "MarkdownV2",
    },
  );

  ctx.wizard.next();
});

const displayNameComposer = new Composer();

displayNameComposer.hears(/^.{1,32}$/, async (ctx) => {
  const displayName = ctx.message.text;
  ctx.scene.state.displayName = displayName;

  await Promise.all([
    ctx.deleteMessage(),
    ctx.telegram.editMessageText(
      ctx.chat.id,
      ctx.scene.state.botMessageId,
      undefined,
      `üí¨ *ID —á–∞—Ç–∞:* ${sanitizeMarkdown(ctx.scene.state.targetChatId)}
üìù *–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞*: ${sanitizeMarkdown(displayName)}

‚¨áÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞*`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_chat_addition" }],
            [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }],
          ],
        },
        parse_mode: "MarkdownV2",
      },
    ),
  ]);

  ctx.wizard.next();
});

const confirmationComposer = new Composer();

confirmationComposer.action("confirm_chat_addition", async (ctx) => {
  const currentDate = new Date();

  let nextNotifyDate = new Date();
  nextNotifyDate.setHours(9, 0, 0);

  if (currentDate.getHours() >= 9) {
    nextNotifyDate = new Date(nextNotifyDate.getTime() + 24 * 60 * 60 * 1000);
  }

  const credentialsEntries = await db
    .selectDistinct({ id: credentials.id })
    .from(credentials)
    .where(eq(credentials.userId, ctx.from.id));

  await db.insert(subscriptions).values({
    displayName: ctx.scene.state.displayName,
    chatId: ctx.scene.state.targetChatId,
    nextNotifyAt: nextNotifyDate,
    credentialsId: credentialsEntries[0].id,
  });

  await Promise.all([
    ctx.editMessageText(
      `ü•≥ *–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${sanitizeMarkdown(nextNotifyDate.toLocaleString("ru-ru", { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric" }))}*`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
          ],
        },
        parse_mode: "MarkdownV2",
      },
    ),
    ctx.scene.leave(),
  ]);
});

export const addChatScene = new Scenes.WizardScene(
  "ADD_CHAT_SCENE",
  async (ctx) => {
    const messageInstance = await ctx.editMessageText(
      "‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö*",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–£–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞",
                url: "https://t.me/username_to_id_bot",
              },
            ],
            [
              {
                text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç",
                callback_data: "use_this_chat",
              },
            ],
            [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }],
          ],
        },
        parse_mode: "MarkdownV2",
      },
    );

    ctx.scene.state.botMessageId = messageInstance.message_id;
    ctx.wizard.next();
  },
  chatIdComposer,
  displayNameComposer,
  confirmationComposer,
);
